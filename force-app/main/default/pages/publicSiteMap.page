<apex:page controller="AccountMapController" docType="html-5.0" showHeader="false" sidebar="false" standardStylesheets="false" applyHtmlTag="false" applyBodyTag="false" cache="false">
    <html>
    <head>
        <!-- Fix InternalDialogs error immediately -->
        <script>
            if (typeof InternalDialogs === 'undefined') {
                window.InternalDialogs = {
                    show: function() { console.log('InternalDialogs.show'); },
                    hide: function() { console.log('InternalDialogs.hide'); }
                };
            }
        </script>
        
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
        <title>SkinCure Accounts</title>
        <style>
            .main-container {
                height: 100vh;
                display: flex;
                flex-direction: column;
                font-family: Arial, sans-serif;
            }
            
            /* Mobile responsiveness */
            @media screen and (max-width: 768px) {
                .main-container {
                    height: auto;
                    min-height: 100vh;
                }
            }
            
            .search-panel {
                background: #fff;
                padding: 20px;
                border-bottom: 1px solid #ddd;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                display: flex;
                align-items: center;
                gap: 15px;
                flex-wrap: wrap;
            }
            
            @media screen and (max-width: 768px) {
                .search-panel {
                    padding: 15px;
                    flex-direction: column;
                    align-items: stretch;
                    gap: 10px;
                }
                
                .search-panel > div,
                .search-panel > label,
                .search-panel > input,
                .search-panel > select {
                    width: 100%;
                    margin-bottom: 10px;
                }
            }
            
            .search-panel label {
                font-weight: bold;
                color: #333;
                margin-right: 5px;
            }
            
            .search-panel input[type="text"] {
                padding: 8px 12px;
                border: 2px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
                width: 120px;
            }
            
            .search-panel select {
                padding: 8px 12px;
                border: 2px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
                background: white;
                min-width: 120px;
            }
            
            @media screen and (max-width: 768px) {
                .search-panel input[type="text"],
                .search-panel select {
                    padding: 12px 15px;
                    font-size: 16px; /* Prevent zoom on iOS */
                    width: 100%;
                    min-width: auto;
                    box-sizing: border-box;
                }
            }
            
            .btn {
                background: #244C5D;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 25px;
                font-size: 14px;
                font-weight: bold;
                cursor: pointer;
                transition: background 0.3s;
                min-height: 44px; /* Touch target size */
            }
            
            .btn:hover {
                background: #1a3a47;
            }
            
            .btn-secondary {
                background: #6c757d;
                margin-left: 10px;
            }
            
            .btn-secondary:hover {
                background: #5a6268;
            }
            
            @media screen and (max-width: 768px) {
                .btn {
                    padding: 12px 20px;
                    font-size: 16px;
                    width: 100%;
                    margin: 5px 0;
                    min-height: 44px;
                    border-radius: 8px;
                }
                
                .btn-secondary {
                    margin-left: 0;
                }
            }
            
            .zoom-controls {
                margin-left: 20px;
                display: inline-block;
                border-left: 1px solid #ddd;
                padding-left: 15px;
            }
            
            .zoom-controls .btn {
                margin: 0 2px;
                padding: 8px 12px;
                font-size: 12px;
                min-width: 70px;
            }
            
            @media screen and (max-width: 768px) {
                .zoom-controls {
                    margin-left: 0;
                    border-left: none;
                    padding-left: 0;
                    border-top: 1px solid #ddd;
                    padding-top: 10px;
                    width: 100%;
                    display: flex;
                    flex-direction: column;
                    gap: 5px;
                }
                
                .zoom-controls .btn {
                    margin: 0;
                    min-width: auto;
                    width: 100%;
                }
            }
            
            .map-container {
                flex: 1;
                position: relative;
                display: flex;
            }
            
            .sidebar {
                width: 400px;
                background: #f8f9fa;
                border-right: 1px solid #ddd;
                overflow-y: auto;
                max-height: calc(100vh - 100px);
            }
            
            @media screen and (max-width: 768px) {
                .map-container {
                    flex-direction: column;
                    height: auto;
                }
                
                .sidebar {
                    width: 100%;
                    max-height: 40vh;
                    border-right: none;
                    border-bottom: 1px solid #ddd;
                    order: 2; /* Put sidebar below map on mobile */
                }
                
                #map {
                    order: 1;
                    height: 60vh !important;
                    min-height: 400px !important;
                }
            }
            
            .account-list {
                padding: 15px;
            }
            
            .account-item {
                background: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 10px;
                cursor: pointer;
                transition: box-shadow 0.2s;
                min-height: 44px; /* Touch target size */
            }
            
            .account-item:hover {
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }
            
            @media screen and (max-width: 768px) {
                .account-item {
                    padding: 12px;
                    margin-bottom: 8px;
                    min-height: 60px;
                }
            }
            
            .account-name {
                font-weight: bold;
                color: #333;
                margin-bottom: 5px;
                font-size: 16px;
            }
            
            .account-name a {
                color: #244C5D;
                text-decoration: none;
                font-weight: bold;
            }
            
            .account-name a:hover {
                text-decoration: underline;
                color: #1a3a47;
            }
            
            .account-address {
                color: #666;
                font-size: 14px;
                margin-bottom: 5px;
            }
            
            .account-contact {
                color: #244C5D;
                font-size: 14px;
            }
            
            .sidebar-message {
                padding: 15px;
                color: #666;
                font-style: italic;
                text-align: center;
                line-height: 1.4;
            }
            
            .sidebar-warning {
                padding: 10px;
                background: #fff3cd;
                border: 1px solid #ffeaa7;
                border-radius: 4px;
                margin-bottom: 10px;
                color: #856404;
                font-size: 12px;
                line-height: 1.3;
            }
            
            .sidebar-info {
                padding: 8px;
                background: #e7f3ff;
                border: 1px solid #b3d9ff;
                border-radius: 4px;
                margin-bottom: 10px;
                color: #244C5D;
                font-size: 12px;
                line-height: 1.3;
            }
            
            .distance-badge {
                background: #e9ecef;
                color: #495057;
                padding: 2px 8px;
                border-radius: 12px;
                font-size: 12px;
                float: right;
            }
            
            #map {
                flex: 1;
                height: 100%;
                min-height: 500px;
            }
            
            @media screen and (max-width: 768px) {
                #map {
                    height: 60vh;
                    min-height: 400px;
                }
            }
            
            .messages {
                margin: 10px 0;
            }
            
            .message {
                padding: 8px 12px;
                border-radius: 4px;
                margin: 5px 0;
            }
            
            .message.confirm {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
            
            .message.warning {
                background: #fff3cd;
                color: #856404;
                border: 1px solid #ffeaa7;
            }
            
            .message.error {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
            
            .message.info {
                background: #d1ecf1;
                color: #0c5460;
                border: 1px solid #bee5eb;
            }
            
            .custom-info-window {
                padding: 15px;
                max-width: 300px;
                background: white;
                border-radius: 8px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.15);
                font-family: Arial, sans-serif;
            }
            
            @media screen and (max-width: 768px) {
                .custom-info-window {
                    max-width: 250px;
                    padding: 12px;
                    font-size: 14px;
                }
                
                .custom-info-window h3 {
                    font-size: 14px;
                }
                
                .custom-info-window .address-info,
                .custom-info-window .contact-info {
                    font-size: 12px;
                }
            }
            
            .custom-info-window h3 {
                margin: 0 0 10px 0;
                font-size: 16px;
                line-height: 1.3;
            }
            
            .custom-info-window .company-link {
                color: #244C5D;
                text-decoration: none;
                font-weight: bold;
            }
            
            .custom-info-window .company-link:hover {
                text-decoration: underline;
                color: #1a3a47;
            }
            
            .custom-info-window .company-name {
                color: #333;
                font-weight: bold;
            }
            
            .custom-info-window .address-info {
                margin: 8px 0;
                color: #666;
                font-size: 14px;
                line-height: 1.4;
            }
            
            .custom-info-window .contact-info {
                margin: 8px 0 0 0;
                color: #666;
                font-size: 14px;
            }
            
            .custom-info-window .phone-link {
                color: #244C5D;
                text-decoration: none;
                outline: none;
                border: none;
            }
            
            .custom-info-window .phone-link:hover {
                text-decoration: underline;
            }
            
            .custom-info-window .phone-link:focus {
                outline: none;
                border: none;
            }
        </style>
        
        <script src="https://maps.googleapis.com/maps/api/js?key={!googleMapsApiKey}&libraries=places,geometry&loading=async&callback=initMap"></script>
        
        <script>
            // Configure VFRemote
            if (typeof Visualforce !== 'undefined' && Visualforce.remoting) {
                Visualforce.remoting.timeout = 120000;
                Visualforce.remoting.buffer = false;
            }
            
            // Cross-origin support
            try {
                // Iframe embedding
                if (window.self !== window.top) {
                    console.log('Running in iframe context');
                }
                
                // Cross-origin communication
                window.addEventListener('message', function(event) {
                    // Trusted domains
                    console.log('Received message from:', event.origin);
                }, false);
                
            } catch (e) {
                console.log('Cross-origin restrictions detected:', e.message);
            }
        </script>
    </head>
    
    <body>
        <!-- End Google Tag Manager (noscript) -->
        
        <div class="main-container">
            <!-- Search Panel -->
            <div class="search-panel">
                <apex:form >
                    <label for="postalCode">Postal Code</label>
                    <apex:input type="text" value="{!postalCode}" id="postalCode" styleClass="postal-input" />
                    
                    <label for="distance">Within</label>
                    <apex:selectList value="{!selectedDistance}" size="1" id="distance">
                        <apex:selectOptions value="{!distanceOptions}" />
                    </apex:selectList>
                    
                    <input type="button" value="Find Locations" class="btn" onclick="searchAccounts()" />
                    <input type="button" value="Reset" class="btn btn-secondary" onclick="resetSearch()" />

                </apex:form>
            </div>
            
            <!-- Messages -->
            <div class="messages" id="messageArea">
                <!-- Messages will be displayed here -->
            </div>
            
            <!-- Map and Sidebar Container -->
            <div class="map-container">
                <!-- Account List Sidebar -->
                <div class="sidebar">
                    <div class="account-list">
                        <h3 style="margin-top: 0; color: #333;">
                            Locations (0)
                        </h3>
                        <!-- Account list will be populated by JavaScript -->
                    </div>
                </div>
                
                <!-- Map -->
                <div id="map"></div>
            </div>
        </div>
        
        <script>
            var markers = [];
            var googleMarkers = [];
            var map;
            var infoWindow;
            var currentInfoWindow = null;
            var accountMarkers = {}; // Store markers by account ID
            var customIcon; // Will be initialized after Google Maps loads

            function switchToStreetView(lat, lng) {
                var position = {lat: lat, lng: lng};
                var streetViewService = new google.maps.StreetViewService();
                var radius = 50;

                streetViewService.getPanorama({ location: position, radius: radius }, function(data, status) {
                    if (status === google.maps.StreetViewStatus.OK) {
                        var panorama = map.getStreetView();
                        panorama.setPosition(position);
                        panorama.setPov({
                            heading: 34,
                            pitch: 10
                        });
                        panorama.setVisible(true);
                    } else {
                        alert('Street View is not available at this location');
                    }
                });
            }

            // Initialize map
            window.initMap = function() {
                try {
                    console.log('Initializing map...');
                    
                    // Initialize custom icon - using custom pushpin image from S3
                    customIcon = {
                        url: 'https://s3.amazonaws.com/62-75-78-74-6f-6e-63-6f-RandomStorage/106773_c629722d-2e92-41d4-980f-dbd46155dd24_PushPin2png.png',
                        scaledSize: new google.maps.Size(32, 32),
                        anchor: new google.maps.Point(16, 32)
                    };
                    
                    var defaultCenter = {lat: 37.0902, lng: -95.7129};
                    
                    var mapElement = document.getElementById('map');
                    if (!mapElement) {
                        console.error('Map element not found!');
                        return;
                    }
                    
                    // Check mobile device
                    var isMobile = window.innerWidth <= 768;
                    
                    map = new google.maps.Map(mapElement, {
                        zoom: isMobile ? 3 : 4,
                        center: defaultCenter,
                        mapTypeControl: !isMobile,
                        streetViewControl: !isMobile,
                        fullscreenControl: true,
                        scrollwheel: true,
                        gestureHandling: isMobile ? 'greedy' : 'auto',
                        zoomControl: !isMobile, // Hide default zoom on mobile since we have custom buttons
                        zoomControlOptions: {
                            position: google.maps.ControlPosition.RIGHT_BOTTOM
                        },
                        scaleControl: !isMobile,
                        minZoom: 3,
                        maxZoom: 20,
                        styles: [
                            {
                                featureType: "water",
                                elementType: "geometry",
                                stylers: [{ color: "#a2daf2" }]
                            },
                            {
                                featureType: "landscape.man_made",
                                elementType: "geometry",
                                stylers: [{ color: "#f7f1df" }]
                            },
                            {
                                featureType: "landscape.natural",
                                elementType: "geometry",
                                stylers: [{ color: "#d0e3b4" }]
                            }
                        ]
                    });
                    
                    console.log('Map created successfully');
                    
                    infoWindow = new google.maps.InfoWindow();
                    
                    // Close info window on map click
                    map.addListener('click', function() {
                        if (currentInfoWindow) {
                            currentInfoWindow.close();
                            currentInfoWindow = null;
                        }
                    });
                    
                    // Simple zoom handling - only update on idle (like MarketingMap)
                    map.addListener('idle', function() {
                        updateSidebarWithVisibleAccounts();
                    });
                    
                    // Load all accounts on initial load (after map is ready)
                    console.log('Loading accounts after map initialization...');
                    loadAccountsFromServer('', '');
                    
                    // Test the zoom listener after a short delay
                    setTimeout(function() {
                        console.log('🧪 Initial zoom level:', map.getZoom());
                        console.log('🧪 Testing zoom listener - this should trigger sidebar update...');
                        // Force an initial sidebar update
                        updateSidebar();
                    }, 1000);
                    
                } catch(error) {
                    console.error('Error initializing map:', error);
                }
            };
            
           
            function loadAccountsFromServer(postalCode, distance) {
                console.log('Loading accounts from server...');
                showLoadingMessage('Loading accounts...');
                
                // Check if Visualforce is available (may not be in iframe context)
                if (typeof Visualforce === 'undefined' || !Visualforce.remoting) {
                    console.error('Visualforce remoting not available - iframe context issue');
                    // You could add fallback data loading here if needed
                    return;
                }
                
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.AccountMapController.getAccountData}',
                    postalCode,
                    distance,
                    function(result, event) {
                        hideLoadingMessage();
                        if (event.status) {
                            console.log('Received account data:', result);
                            try {
                                var data = JSON.parse(result);
                                
                                // Handle new response format with accounts and center
                                if (data.accounts) {
                                    markers = data.accounts;
                                    console.log('✅ Loaded ' + markers.length + ' account markers from data.accounts');
                                    // Debug: Log first marker structure
                                    if (markers.length > 0) {
                                        console.log('🔍 First marker structure:', markers[0]);
                                    }
                                } else {
                                    // Fallback for old format
                                    markers = data;
                                    console.log('✅ Loaded ' + markers.length + ' account markers from direct data');
                                    // Debug: Log first marker structure
                                    if (markers.length > 0) {
                                        console.log('🔍 First marker structure:', markers[0]);
                                    }
                                }
                                
                                // Center map on zip code if provided
                                if (data.center && postalCode) {
                                    console.log('Centering map on zip code ' + data.center.zip + ' at:', data.center.lat, data.center.lng);
                                    map.setCenter({lat: data.center.lat, lng: data.center.lng});
                                    map.setZoom(12); // Good zoom level for city view
                                    
                                    // Add a center marker to show the search center
                                    if (window.centerMarker) {
                                        window.centerMarker.setMap(null);
                                    }
                                    
                                    window.centerMarker = new google.maps.Marker({
                                        position: {lat: data.center.lat, lng: data.center.lng},
                                        map: map,
                                        title: 'Search Center: ' + data.center.zip,
                                        icon: {
                                            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                                                    <circle cx="12" cy="12" r="8" fill="#ff4444" stroke="#fff" stroke-width="2"/>
                                                    <circle cx="12" cy="12" r="3" fill="#fff"/>
                                                </svg>
                                            `),
                                            scaledSize: new google.maps.Size(24, 24),
                                            anchor: new google.maps.Point(12, 12)
                                        }
                                    });
                                }
                                
                                loadAccountMarkers(postalCode);
                                
                                                // Force sidebar update after loading markers
                console.log('🔄 Forcing sidebar update after loading accounts...');
                setTimeout(function() {
                    updateSidebarWithVisibleAccounts();
                }, 500);
                                
                            } catch (e) {
                                console.error('Error parsing account data:', e);
                                showError('Error loading account data');
                            }
                        } else {
                            console.error('Error from server:', event);
                            console.error('Event status:', event.status);
                            console.error('Event message:', event.message);
                            console.error('Event where:', event.where);
                            
                            showError('Error loading accounts: ' + event.message + (event.where ? ' (' + event.where + ')' : ''));
                        }
                    },
                    {escape: false}
                );
            }
            
            function searchAccounts() {
                var postalCode = document.querySelector('input[id*="postalCode"]').value;
                var distance = document.querySelector('select[id*="distance"]').value;
                
                console.log('Searching with postal code:', postalCode, 'distance:', distance);
                loadAccountsFromServer(postalCode, distance);
            }
            
            function resetSearch() {
                var postalCodeElement = document.querySelector('input[id*="postalCode"]');
                var distanceElement = document.querySelector('select[id*="distance"]');
                
                if (postalCodeElement) postalCodeElement.value = '';
                if (distanceElement) distanceElement.value = '';
                
                // Remove center marker if it exists
                if (window.centerMarker) {
                    window.centerMarker.setMap(null);
                    window.centerMarker = null;
                }
                
                // Reset map to show all locations
                loadAccountsFromServer('', '');
            }
            
            function showLoadingMessage(message) {
                console.log(message);
            }
            
            function hideLoadingMessage() {
                console.log('Loading complete');
            }
            
            
            function showError(message) {
                console.error('ERROR:', message);
                
                // Show error in the message area instead of alert
                var messageArea = document.getElementById('messageArea');
                if (messageArea) {
                    messageArea.innerHTML = '<div style="background: #f8d7da; color: #721c24; padding: 10px; border: 1px solid #f5c6cb; border-radius: 4px; margin: 10px 0;">' +
                                          '<strong>Error:</strong> ' + message +
                                          '</div>';
                } else {
                    alert('Error: ' + message);
                }
            }
            
            // New function that shows only visible accounts
            function updateSidebarWithVisibleAccounts() {
                var sidebar = document.querySelector('.account-list');
                if (!sidebar) {
                    return;
                }
                
                if (!markers || markers.length === 0) {
                    console.log('No markers to display');
                    sidebar.innerHTML = '<h3 style="margin-top: 0; color: #333;">Locations (0)</h3><p>No locations to display.</p>';
                    return;
                }
                
                // Get accounts visible in current viewport
                var visibleAccounts = getVisibleAccounts();
                var totalCount = markers.length;
                var visibleCount = visibleAccounts.length;
                
                console.log('📊 Updating sidebar with', visibleCount, 'visible accounts out of', totalCount, 'total');
                
                // Check if we should show the list based on zoom level
                var currentZoom = map ? map.getZoom() : 0;
                var shouldShowList = currentZoom >= 5; // Show list when zoomed to 5 or higher
                var displayCount = visibleCount; // Show all visible records
                
                var html = '<h3 style="margin-top: 0; color: #333;">Visible Locations (' + visibleCount + ' of ' + totalCount + ')</h3>';
                
                if (!shouldShowList) {
                    html += '<div class="sidebar-message">🔍 Zoom in closer (current: ' + Math.round(currentZoom * 10) / 10 + ', need: 5+)<br>to see locations in current view</div>';
                } else if (visibleCount === 0) {
                    html += '<div class="sidebar-message">📍 No locations visible in current map area<br>Pan or zoom out to see more locations</div>';
                } else {
                    // Show viewport info
                    if (visibleCount < totalCount) {
                        html += '<div class="sidebar-info">🗺️ Showing locations in current map view. Pan or zoom out to see more.</div>';
                    }
                    
                    // No limits - show all visible accounts
                    
                    // Display visible accounts
                    for (var i = 0; i < displayCount; i++) {
                        var account = visibleAccounts[i];
                        html += '<div class="account-item" onclick="selectAccount(\'' + account.id + '\')">';
                        
                        // Account name (no website link)
                        html += '<div class="account-name">' + account.name + '</div>';
                        
                        html += '<div class="account-address">Postal Code: ' + account.address + '</div>';
                        if (account.phone) {
                            html += '<div class="account-contact">Phone: ' + account.phone + '</div>';
                        }
                        html += '</div>';
                    }
                }
                
                sidebar.innerHTML = html;
            }
            
            // Simple sidebar update function
            function updateSidebar() {
                updateSidebarWithVisibleAccounts();
            }
            
            // Get accounts that are currently visible in the map viewport
            function getVisibleAccounts() {
                if (!map || !markers || markers.length === 0) {
                    return [];
                }
                
                var bounds = map.getBounds();
                if (!bounds) {
                    console.log('⚠️ No map bounds available');
                    return markers; // Return all if bounds not available
                }
                
                var visibleAccounts = [];
                
                markers.forEach(function(account) {
                    // Check if account has valid coordinates
                    if (account.lat && account.lng && 
                        !isNaN(parseFloat(account.lat)) && !isNaN(parseFloat(account.lng))) {
                        
                        var accountPosition = new google.maps.LatLng(
                            parseFloat(account.lat), 
                            parseFloat(account.lng)
                        );
                        
                        // Check if this account is within the current map bounds
                        if (bounds.contains(accountPosition)) {
                            visibleAccounts.push(account);
                        }
                    }
                });
                
                return visibleAccounts;
            }
            
            // Function to determine if sidebar list should be shown - zoom 5+
            function shouldShowSidebarList() {
                if (!map || !markers) {
                    return false;
                }
                
                var zoom = map.getZoom();
                return zoom >= 5;
            }
            
            
            function loadAccountMarkers(postalCode) {
                // Clear existing markers
                clearMarkers();
                
                if (!markers || markers.length === 0) {
                    console.log('No markers data available');
                    return;
                }
                
                if (!map) {
                    console.error('Map not initialized yet');
                    return;
                }
                
                console.log('Creating account markers...', markers.length);
                var bounds = new google.maps.LatLngBounds();
                var validMarkers = 0;
                
                markers.forEach(function(markerData, index) {
                    // Validate marker data
                    if (!markerData.lat || !markerData.lng || 
                        isNaN(parseFloat(markerData.lat)) || isNaN(parseFloat(markerData.lng))) {
                        return;
                    }
                    
                    var position = {
                        lat: parseFloat(markerData.lat),
                        lng: parseFloat(markerData.lng)
                    };
                    
                    var marker = new google.maps.Marker({
                        position: position,
                        map: map,
                        title: markerData.name,
                        icon: customIcon
                    });
                    
                    validMarkers++;
                    googleMarkers.push(marker);
                    bounds.extend(position);
                    
                    // Store marker by account ID for easy lookup
                    accountMarkers[markerData.id] = marker;
                    
                    // Add click listener for info window with improved styling
                    var content = '<div class="custom-info-window">';
                    
                    // Company name (no website link)
                    content += '<h3 class="company-name">' + markerData.name + '</h3>';
                    
                    // Address
                    content += '<p class="address-info">Postal Code: ' + markerData.address + '</p>';
                    
                    // Phone
                    if (markerData.phone) {
                        content += '<p class="contact-info"><strong>Phone:</strong> <a href="tel:' + markerData.phone + '" class="phone-link">' + markerData.phone + '</a></p>';
                    }
                    
                    content += '</div>';
                    
                    var markerInfoWindow = new google.maps.InfoWindow({
                        content: content,
                        maxWidth: 320,
                        pixelOffset: new google.maps.Size(0, -10)
                    });
                    
                    marker.addListener('click', function() {
                        // Close currently open info window if exists
                        if (currentInfoWindow) {
                            currentInfoWindow.close();
                        }
                        
                        // Open this marker's info window and set as current
                        markerInfoWindow.open(map, marker);
                        currentInfoWindow = markerInfoWindow;
                    });
                });
                
                console.log('📊 MARKER CREATION SUMMARY:');
                console.log('   - Total markers in data:', markers.length);
                console.log('   - Valid markers created:', validMarkers);
                console.log('   - Invalid markers skipped:', markers.length - validMarkers);
                console.log('   - Google markers array length:', googleMarkers.length);
                
                // Fit bounds to show all search results when doing a radius search
                if (postalCode && validMarkers > 0) {
                    console.log('🎯 Fitting map to show search results for postal code:', postalCode);
                    map.fitBounds(bounds);
                    
                    // Ensure reasonable zoom level for search results
                    google.maps.event.addListenerOnce(map, 'bounds_changed', function() {
                        if (map.getZoom() > 15 && validMarkers === 1) {
                            map.setZoom(15);
                        } else if (map.getZoom() < 4) {
                            map.setZoom(4);
                        }
                    });
                } else {
                    // Don't auto-fit bounds for initial load to prevent map shifting
                    console.log('📍 Initial load - keeping current map view');
                }
            }
            
            function clearMarkers() {
                for (var i = 0; i < googleMarkers.length; i++) {
                    googleMarkers[i].setMap(null);
                }
                googleMarkers = [];
                accountMarkers = {};
            }
            
            function selectAccount(accountId) {
                // Find the marker for this account and trigger its click event
                var marker = accountMarkers[accountId];
                if (marker) {
                    var position = marker.getPosition();
                    zoomToLocation(position.lat(), position.lng(), 12);
                    google.maps.event.trigger(marker, 'click');
                }
            }
            

            
            // Test function - call this in console to test zoom functionality
            window.testZoom = function() {
                console.log('🧪 Testing zoom functionality...');
                console.log('Current zoom:', map.getZoom());
                console.log('Markers count:', markers ? markers.length : 0);
                updateSidebar();
            };
            
            // Manual refresh function - call this in console if sidebar doesn't update
            window.refreshSidebar = function() {
                console.log('🔄 Manual sidebar refresh');
                forceUpdateSidebar();
            };
            
            // Test visible accounts function
            window.testVisible = function() {
                console.log('🧪 Testing visible accounts...');
                var visible = getVisibleAccounts();
                console.log('Visible accounts:', visible.length);
                console.log('Total accounts:', markers ? markers.length : 0);
                console.log('Map bounds:', map ? map.getBounds() : 'no map');
                return visible;
            };
            
            // Show current status - useful for debugging
            window.showStatus = function() {
                console.log('📊 Current Status:');
                console.log('- Map zoom:', map ? map.getZoom() : 'no map');
                console.log('- Last zoom level:', window.lastZoomLevel);
                console.log('- Markers count:', markers ? markers.length : 'no markers');
                console.log('- Should show list:', shouldShowSidebarList());
                console.log('- Zoom threshold: 10 (current: ' + (map ? map.getZoom() : 0) + ')');
                console.log('- Records threshold: 200 (current: ' + (markers ? markers.length : 0) + ')');
                console.log('- Max display: 250 records');
            };
            
            // Force zoom detection - call this if zoom events aren't working
            window.forceZoomCheck = function() {
                console.log('🔧 Forcing zoom check...');
                if (map) {
                    var currentZoom = map.getZoom();
                    console.log('Current zoom:', currentZoom);
                    console.log('Last stored zoom:', window.lastZoomLevel);
                    window.lastZoomLevel = currentZoom;
                    updateSidebar();
                } else {
                    console.log('❌ No map available');
                }
            };
            

            
            // Enhanced zoom to location function
            function zoomToLocation(lat, lng, zoomLevel) {
                if (map) {
                    map.setCenter({lat: lat, lng: lng});
                    map.setZoom(zoomLevel || 12);
                }
            }
            
            // Legacy functions for compatibility
            function updateAccountData() {
                // No longer needed with remoting
            }
            
            function refreshMap() {
                // No longer needed with remoting  
            }

            function createDirectionsUrl(name, lat, lng) {
                const fullAddress = encodeURIComponent(`${name}, ${lat},${lng}`);
                return `https://www.google.com/maps/dir/?api=1&origin=my+location&destination=${lat},${lng}&destination_name=${encodeURIComponent(name)}`;
            }

            // Removed old functions
            
            // initMap is now called automatically by Google Maps API callback
            // No need for window.onload since we're using callback=initMap in the script tag
        </script>
    </body>
    </html>
</apex:page>